{
	"name": "dataflow_movies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_movies_data_flow_source",
						"type": "DatasetReference"
					},
					"name": "moviessource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_movies_data_flow_sink",
						"type": "DatasetReference"
					},
					"name": "sinkmovies",
					"rejectedDataLinkedService": {
						"referenceName": "ls_storage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_movies_data_flow_sink",
						"type": "DatasetReference"
					},
					"name": "moviesbyyear"
				}
			],
			"transformations": [
				{
					"name": "derivedColumnmoviesaddingcolumn"
				},
				{
					"name": "aggregatemoviesbyyear"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> moviessource",
				"moviessource derive(year = toInteger(trim(right(title, 6), '()')),",
				"          title = toString(left(title, length(title)-6 ))) ~> derivedColumnmoviesaddingcolumn",
				"derivedColumnmoviesaddingcolumn aggregate(groupBy(year),",
				"     moviescount = count()) ~> aggregatemoviesbyyear",
				"derivedColumnmoviesaddingcolumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['moviesclean'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkmovies",
				"aggregatemoviesbyyear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['moviesbyyear'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> moviesbyyear"
			]
		}
	}
}