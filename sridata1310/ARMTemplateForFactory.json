{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sridata1310"
		},
		"ls_sourcedb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sourcedb'"
		},
		"ls_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_storage'"
		},
		"ls_targetdb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_targetdb'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_call_dataflow_customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "this pipeline for to call the dataflow",
				"activities": [
					{
						"name": "df_customerpurchases",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_customer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"purchaseorder": {},
									"customerdata": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-19T10:13:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_incremental_copy_customer_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "incremental_copy_customer_table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_old_watermark_value_customer",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "lkp_new_watermark_value_customer",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from [dbo].[customer_table] where lastmodifytime > '@{activity('lkp_old_watermark_value_customer').output.firstRow.oldwatermarkvalue}' and lastmodifytime <= '@{activity('lkp_new_watermark_value_customer').output.firstRow.newwatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sourcedb_customer_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_targetdb_customer_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "lkp_new_watermark_value_customer",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select max(lastmodifytime) as newwatermarkvalue from [dbo].[customer_table]",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sourcedb_customer_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "lkp_old_watermark_value_customer",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select tablename, watermarkvalue as oldwatermarkvalue from watermarktable where tablename = 'customer_table'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_targetdb_watermark_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "update_watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "incremental_copy_customer_table",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('lkp_new_watermark_value_customer').output.firstRow.newwatermarkvalue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('lkp_old_watermark_value_customer').output.firstRow.tablename",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_targetdb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-18T09:35:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sourcedb_customer_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_targetdb_customer_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_targetdb_watermark_table')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_targetdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_incremental_main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_configuration_table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_configuration_table",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_configuration_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_configuration_table').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Execute Pipeline incremental copy dynamic",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pl_incrementally_copy_dynamic",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"tablename": {
												"value": "@item().tablename",
												"type": "Expression"
											},
											"columnname": {
												"value": "@item().Watermarkcolumn",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-18T09:55:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_configuration_table')]",
				"[concat(variables('factoryId'), '/pipelines/pl_incrementally_copy_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_incrementally_copy_dynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_new_watermark_value_customer",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select max(@{pipeline().parameters.columnname}) as newwatermarkvalue from @{pipeline().parameters.tablename}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_sourcedb_customer_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "incremental_copy_customer_table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "lkp_new_watermark_value_customer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "lkp_old_watermark_value_customer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.tablename} where @{pipeline().parameters.columnname} > '@{activity('lkp_old_watermark_value_customer').output.firstRow.oldwatermarkvalue}' and @{pipeline().parameters.columnname} <= '@{activity('lkp_new_watermark_value_customer').output.firstRow.newwatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_sourcedb_customer_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_targetdb_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"tablename": {
										"value": "@pipeline().parameters.tablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "update_watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "incremental_copy_customer_table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('lkp_new_watermark_value_customer').output.firstRow.newwatermarkvalue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@activity('lkp_old_watermark_value_customer').output.firstRow.tablename",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_targetdb",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "lkp_old_watermark_value_customer",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select tablename, watermarkvalue as oldwatermarkvalue from watermarktable where tablename = '@{pipeline().parameters.tablename}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_targetdb_watermark_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"tablename": {
						"type": "string"
					},
					"columnname": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-18T09:41:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sourcedb_customer_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_targetdb_dynamic')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_targetdb')]",
				"[concat(variables('factoryId'), '/datasets/ds_targetdb_watermark_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_configuration_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_targetdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "Watermarkcolumn",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "configuration"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_targetdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_dataflow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer.txt",
						"container": "oltp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customercode",
						"type": "String"
					},
					{
						"name": "customername",
						"type": "String"
					},
					{
						"name": "address",
						"type": "String"
					},
					{
						"name": "phonenumber",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dataflow_octpurchases')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_targetdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customercode",
						"type": "varchar"
					},
					{
						"name": "customername",
						"type": "varchar"
					},
					{
						"name": "productspurchased",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Octcustomerpurchases"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_targetdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movies_data_flow_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "data_flow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sink"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movies_data_flow_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "data_flow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies.txt",
						"container": "oltp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_purchaseorder_dataflow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "purchaseorder.txt",
						"container": "oltp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "purchaseorder0",
						"type": "String"
					},
					{
						"name": "customercode",
						"type": "String"
					},
					{
						"name": "productcode",
						"type": "String"
					},
					{
						"name": "employeecode",
						"type": "String"
					},
					{
						"name": "purchaseorder4",
						"type": "String"
					},
					{
						"name": "quantity",
						"type": "String"
					},
					{
						"name": "unitprice",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sourcedb_customer_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sourcedb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sourcedb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_targetdb_customer_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_targetdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_targetdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_targetdb_dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_targetdb",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_targetdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_targetdb_watermark_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_targetdb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_targetdb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sourcedb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sourcedb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_targetdb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_targetdb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_customer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_purchaseorder_dataflow",
								"type": "DatasetReference"
							},
							"name": "purchaseorder"
						},
						{
							"dataset": {
								"referenceName": "ds_customer_dataflow",
								"type": "DatasetReference"
							},
							"name": "customerdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dataflow_octpurchases",
								"type": "DatasetReference"
							},
							"name": "output"
						}
					],
					"transformations": [
						{
							"name": "purchaseorderprojection"
						},
						{
							"name": "customerprojection"
						},
						{
							"name": "dataqualityfilters"
						},
						{
							"name": "joinstream"
						},
						{
							"name": "metrics"
						}
					],
					"scriptLines": [
						"source(output(",
						"          purchaseorder0 as string,",
						"          customercode as string,",
						"          productcode as string,",
						"          employeecode as string,",
						"          purchaseorder4 as string,",
						"          quantity as long,",
						"          unitprice as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> purchaseorder",
						"source(output(",
						"          customercode as string,",
						"          customername as string,",
						"          address as string,",
						"          phonenumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customerdata",
						"purchaseorder select(mapColumn(",
						"          customercode,",
						"          quantity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> purchaseorderprojection",
						"customerdata select(mapColumn(",
						"          customercode,",
						"          customername",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> customerprojection",
						"purchaseorderprojection filter(greater({customercode}, '0')) ~> dataqualityfilters",
						"dataqualityfilters, customerprojection join(purchaseorderprojection@customercode == customerprojection@customercode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinstream",
						"joinstream aggregate(groupBy(customerprojection@customercode,",
						"          customername),",
						"     {products purchased} = sum(quantity)) ~> metrics",
						"metrics sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customercode as string,",
						"          customername as string,",
						"          productspurchased as long",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_purchaseorder_dataflow')]",
				"[concat(variables('factoryId'), '/datasets/ds_customer_dataflow')]",
				"[concat(variables('factoryId'), '/datasets/ds_dataflow_octpurchases')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_movies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_movies_data_flow_source",
								"type": "DatasetReference"
							},
							"name": "moviessource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_movies_data_flow_sink",
								"type": "DatasetReference"
							},
							"name": "sinkmovies",
							"rejectedDataLinkedService": {
								"referenceName": "ls_storage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "ds_movies_data_flow_sink",
								"type": "DatasetReference"
							},
							"name": "moviesbyyear"
						}
					],
					"transformations": [
						{
							"name": "derivedColumnmoviesaddingcolumn"
						},
						{
							"name": "aggregatemoviesbyyear"
						},
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movieId as integer,",
						"          title as string,",
						"          genres as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false) ~> moviessource",
						"moviessource derive(year = toInteger(trim(right(title, 6), '()')),",
						"          title = toString(left(title, length(title)-6 ))) ~> derivedColumnmoviesaddingcolumn",
						"derivedColumnmoviesaddingcolumn aggregate(groupBy(year),",
						"     moviescount = count()) ~> aggregatemoviesbyyear",
						"derivedColumnmoviesaddingcolumn, aggregatemoviesbyyear exists(movieId == moviescount,",
						"     negate:false,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'both')~> exists1",
						"derivedColumnmoviesaddingcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesclean'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkmovies",
						"aggregatemoviesbyyear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['moviesbyyear'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> moviesbyyear"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_movies_data_flow_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_movies_data_flow_sink')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/call_dataflow_movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow_movies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_movies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"moviessource": {},
									"sinkmovies": {},
									"moviesbyyear": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_movies')]"
			]
		}
	]
}